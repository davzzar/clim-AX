{"version":3,"sources":["App.js","index.js"],"names":["startingDate","Moment","autoplayTimeout","imageindex","prefix","blendmode","opacity","togglevar","image","App","props","state","imageNumber","autoplayEnabled","enabledHeithmap","enabledTemps","enabledRivers","enabledRain","enabledVeg","enabledTempsAno","setInterval","handleAutoplayTimeout","bind","className","src","onChange","this","scrollImage","min","max","value","railStyle","backgroundColor","trackStyle","onClick","toggleAutoplay","style","width","height","dangerouslySetInnerHTML","__html","renderSvgAsText","ToggleButton","selected","toggle","add","format","vari","setState","n","output","forEach","imagething","imagethingIsVisable","hasOwnProperty","prefixedImgNr","setCurrentImageThing","loadedImages","targetImageThing","loadCallback","primaryImage","Image","onload","newImageNumber","padStart","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96d1f595.chunk.js","sourcesContent":["import React from \"react\";\nimport \"rc-slider/assets/index.css\";\nimport Moment from \"moment\";\nimport Slider from \"rc-slider\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\n\nconst startingDate = Moment(\"2018-1-1\");\nconst amountOfImages = 138;\nconst autoplayTimeout = 100;\n\nconst imageindex = [\n  {\n    prefix: \"/images/tempplots/temp\",\n    blendmode: \"normal\",\n    opacity: 0.8,\n    togglevar: \"enabledTemps\"\n  },\n  {\n    prefix: \"/images/anoplots/ano\",\n    blendmode: \"normal\",\n    opacity: 0.8,\n    togglevar: \"enabledTempsAno\"\n  },\n  {\n    prefix: \"/images/ndviplots/ndvi\",\n    blendmode: \"normal\",\n    opacity: 1,\n    togglevar: \"enabledVeg\"\n  },\n  {\n    image: \"/images/heightplot/topo_only_5.png\",\n    blendmode: \"overlay\",\n    opacity: 1,\n    togglevar: \"enabledHeithmap\"\n  },\n  {\n    prefix: \"/images/riverplots/river\",\n    blendmode: \"screen\",\n    opacity: 1,\n    togglevar: \"enabledRivers\"\n  },\n  {\n    image: \"/images/borderplot/border.png\",\n    blendmode: \"brighten\"\n  },\n  {\n    prefix: \"/images/rainplots/rain\",\n    blendmode: \"normal\",\n    opacity: 0.7,\n    togglevar: \"enabledRain\"\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageNumber: 1,\n      autoplayEnabled: false,\n      enabledHeithmap: true,\n      enabledTemps: true,\n      enabledRivers: true,\n      enabledRain: true,\n      enabledVeg: false,\n      enabledTempsAno: false\n    };\n    setInterval(this.handleAutoplayTimeout.bind(this), autoplayTimeout);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"logo\">\n            <img src=\"/images/logos/logo.png\"></img>\n        </div>\n        <div className=\"slider\">\n          <Slider\n            onChange={this.scrollImage.bind(this)}\n            min={1}\n            max={amountOfImages}\n            value={this.state.imageNumber}\n            railStyle={{\n              backgroundColor: \"#3c3b3b\"\n            }}\n            trackStyle={{\n              backgroundColor: \"gray\"\n            }}\n          />\n        </div>\n        <div\n          className=\"imagecontainer\"\n          onClick={this.toggleAutoplay.bind(this)}\n        >\n          <svg style={{width: \"780px\", height: \"800px\"}} dangerouslySetInnerHTML={{ __html: this.renderSvgAsText(this.state.imageNumber) }} />\n        </div>\n\n        <div className=\"button-controls\">\n          <ToggleButton\n            value=\"check\"\n            selected={this.state.enabledHeithmap}\n            onChange={this.toggle(\"enabledHeithmap\")}\n          >\n            Heightmap\n          </ToggleButton>{\" \"}\n          &nbsp;\n          <ToggleButton\n            value=\"check\"\n            selected={this.state.enabledRivers}\n            onChange={this.toggle(\"enabledRivers\")}\n          >\n            Rivers\n          </ToggleButton>\n          &nbsp;\n          <ToggleButton\n            value=\"check\"\n            selected={this.state.enabledTemps}\n            onChange={this.toggle(\"enabledTemps\")}\n          >\n            Temperatures\n          </ToggleButton>\n          &nbsp;\n          <ToggleButton\n            value=\"check\"\n            selected={this.state.enabledTempsAno}\n            onChange={this.toggle(\"enabledTempsAno\")}\n          >\n            Temperature Anomoly\n          </ToggleButton>\n          &nbsp;\n          <ToggleButton\n              value=\"check\"\n              selected={this.state.enabledRain}\n              onChange={this.toggle(\"enabledRain\")}\n          >\n            Rain\n          </ToggleButton>\n        &nbsp;\n          <ToggleButton\n              value=\"check\"\n              selected={this.state.enabledVeg}\n              onChange={this.toggle(\"enabledVeg\")}\n          >\n            Vegetation\n          </ToggleButton>\n        </div>\n\n        <span className=\"metadata\">\n          {Moment(startingDate)\n            .add(this.state.imageNumber - 1, \"day\")\n            .format(\"DD MMM YYYY\")}\n        </span>\n      </div>\n    );\n  }\n\n  toggle(vari) {\n    return () => {\n      //if (vari !== \"enableTemps\" && vari !== \"enableTempsAno\" && vari !== \"enableVeg\") {\n          this.setState({[vari]: !this.state[vari]})\n       /* }\n      else if(this.state[vari]) {\n          this.setState({[vari]: false})\n        }\n        else {\n         let newThing =  {\n            ebableTemps: false,\n            ebableTempsAno: false,\n            ebableVeg: false\n          }\n          newThing[vari] = true;\n\n          this.setState(newThing)\n        } */\n    };\n  }\n\n  renderSvgAsText(n) {\n    let output = \"\";\n    imageindex.forEach(imagething => {\n      if (!this.imagethingIsVisable(imagething)) {\n        return;\n      }\n      if (imagething.hasOwnProperty(\"image\")) {\n        output += `<image href=\"${imagething.image}\" style=\"mix-blend-mode: ${imagething.blendmode}; opacity: ${imagething.opacity || 1}\" />`;\n      } else {\n        output += `<image href=\"${imagething.prefix}${this.prefixedImgNr(n)}.png\" style=\"mix-blend-mode: ${imagething.blendmode}; opacity: ${imagething.opacity || 1}\" \" />`;\n      }\n    });\n    return output;\n  }\n\n  imagethingIsVisable(imagething) {\n    return !imagething.hasOwnProperty(\"togglevar\") || this.state[imagething.togglevar]\n  }\n\n  toggleAutoplay() {\n    this.setState({\n      autoplayEnabled: !this.state.autoplayEnabled\n    });\n  }\n\n  handleAutoplayTimeout() {\n    if (this.state.autoplayEnabled && this.state.imageNumber < amountOfImages) {\n      this.setCurrentImageThing(this.state.imageNumber+1);\n      if(this.state.imageNumber + 1 >= amountOfImages) {\n        this.setState({\n          autoplayEnabled: false\n        });\n      }\n    }\n  }\n\n  setCurrentImageThing(n) {\n    let loadedImages = 0;\n    let targetImageThing = 0;\n    let loadCallback = () => {\n      loadedImages++;\n      if(loadedImages === targetImageThing) {\n        this.setState({\n          imageNumber: n\n        });\n      }\n    };\n\n    imageindex.forEach(imagething => {\n      if (!this.imagethingIsVisable(imagething)) {\n        return;\n      }\n      const primaryImage = new Image();\n      primaryImage.onload = loadCallback;\n      targetImageThing++;\n      if (imagething.hasOwnProperty(\"image\")) {\n        primaryImage.src = imagething.image;\n      } else {\n        primaryImage.src += imagething.prefix + this.prefixedImgNr(n) + \".png\"\n      }\n    });\n  }\n\n  scrollImage(newImageNumber) {\n    this.setCurrentImageThing(newImageNumber)\n  }\n\n  prefixedImgNr(n) {\n    return (\"\" + n).padStart(4, \"0\");\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}